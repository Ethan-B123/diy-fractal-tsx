{"version":3,"sources":["Store/SourcePoints/Types.ts","Components/Form/SourcePointIndexItem.tsx","Components/Form/SourcePointIndex.tsx","Store/SourcePoints/Actions.ts","Store/FractalPoints/Types.ts","Components/Form/FractalPointIndexItem.tsx","Components/Form/FractalPointIndex.tsx","Store/FractalPoints/actions.ts","Components/App/App.tsx","serviceWorker.ts","Helpers.ts","FractalCanvas/FractalCanvas.ts","Store/FractalPoints/Reducer.ts","Store/SourcePoints/Reducer.ts","Store/rootReducer.ts","Store/PreloadedState.ts","index.tsx","Store/store.ts"],"names":["ADD_SOURCE_POINT","EDIT_SOURCE_POINT","REMOVE_SOURCE_POINT","onChangeInt","props","hookSetFn","changeVal","e","val","currentTarget","value","copy","JSON","parse","stringify","point","isNaN","parseInt","editPoint","onColorChange","color","onTypeChange","type","onRemove","removePoint","SourcePointIndexItem","useState","x","toString","set_x","y","set_y","w","set_w","h","set_h","className","onChange","onClick","connected","connect","state","sourcePoints","dispatch","defaultSourcePoint","id","addSourcePoint","editSourcePoint","removeSourcePoint","alert","points","map","key","ADD_FRACTAL_POINT","EDIT_FRACTAL_POINT","SET_GCO","REMOVE_FRACTAL_POINT","SET_ITER_DELAY","SET_FORCE_FULL_PLAY","FractalPointIndexItem","iters","set_iters","setGCO","fractalPoints","defaultFractalPoint","addFractalPoint","editFractalPoint","removeFractalPoint","newGCO","setForceFullPlay","forceFullPlay","setIterDelay","newDelay","globalCompositeOperation","App","Boolean","window","location","hostname","match","loadImgPromise","img","src","Promise","resolve","addEventListener","FractalCanvas","fCanvas","sCanvas","myImg","Image","updateId","pendingUpdate","store","ctx","this","getContext","clearRect","width","height","forEach","drawSourcePoint","printFractal","save","translate","fillStyle","beginPath","ellipse","Math","PI","closePath","fill","fillRect","restore","thisUpdateId","fractalPointsCopy","res","setTimeout","toDataURL","drawImage","length","filter","fp","i","fractalPoint","initialState","maxId","iterationDelay","rootReducer","combineReducers","action","newPoint0","FPsCopy0","push","newPoint1","FPsCopy1","removePoint5","FPsCopy5","splice","FPsCopy2","FPsCopy3","FPsCopy4","FPsCopy6","FPsCopy7","FPsCopy8","SPsCopy0","SPsCopy1","removePoint2","SPsCopy2","other","document","HTMLFractalCanvas","getElementById","HTMLSourceCanvas","createStore","makePreloadedState","applyMiddleware","logger","fractalCanvas","receiveUpdates","getState","subscribe","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f6e4e8e.chunk.js","sourcesContent":["import { SourcePoint } from \"../../FractalCanvas/Types\";\n\nexport const ADD_SOURCE_POINT = \"UC_ADD_SOURCE_POINT\";\nexport const EDIT_SOURCE_POINT = \"UC_EDIT_SOURCE_POINT\";\nexport const REMOVE_SOURCE_POINT = \"REMOVE_SOURCE_POINT\";\n\nexport interface AddSourcePointAction {\n  type: typeof ADD_SOURCE_POINT;\n  point: SourcePoint;\n}\n\nexport interface EditSourcePointAction {\n  type: typeof EDIT_SOURCE_POINT;\n  point: SourcePoint;\n}\n\nexport interface RemoveSourcePointAction {\n  type: typeof REMOVE_SOURCE_POINT;\n  point: SourcePoint;\n}\n\nexport interface SourcePointsState {\n  points: Array<SourcePoint>;\n  maxId: number;\n}\n\nexport type SourcePointActionTypes =\n  | AddSourcePointAction\n  | EditSourcePointAction\n  | RemoveSourcePointAction;\n","import React, { ChangeEvent, useState } from \"react\";\nimport { SourcePoint } from \"../../FractalCanvas/Types\";\nimport { SourcePointActionTypes } from \"../../Store/SourcePoints/Types\";\n\ninterface SourcePointIndexItemProps {\n  point: SourcePoint;\n  editPoint: (point: SourcePoint) => SourcePointActionTypes;\n  removePoint: (point: SourcePoint) => SourcePointActionTypes;\n}\n\nconst onChangeInt = (\n  props: SourcePointIndexItemProps,\n  hookSetFn: React.Dispatch<React.SetStateAction<string>>,\n  changeVal: \"x\" | \"y\" | \"w\" | \"h\"\n) => (e: ChangeEvent<HTMLInputElement>) => {\n  const val = e.currentTarget.value;\n  const copy = JSON.parse(JSON.stringify(props.point)) as SourcePoint;\n  if (val === \"\") {\n    hookSetFn(val);\n  } else if (!isNaN(parseInt(val))) {\n    hookSetFn(val);\n    copy[changeVal] = parseInt(val);\n    props.editPoint(copy);\n  }\n};\n\nconst onColorChange = (props: SourcePointIndexItemProps) => (\n  e: ChangeEvent<HTMLInputElement>\n) => {\n  const val = e.currentTarget.value;\n  const copy = JSON.parse(JSON.stringify(props.point)) as SourcePoint;\n  copy.color = val;\n  props.editPoint(copy);\n};\n\nconst onTypeChange = (props: SourcePointIndexItemProps) => (\n  e: ChangeEvent<HTMLSelectElement>\n) => {\n  const val: \"Box\" | \"Circle\" = e.currentTarget.value as \"Box\" | \"Circle\";\n  const copy = JSON.parse(JSON.stringify(props.point)) as SourcePoint;\n  copy.type = val;\n  props.editPoint(copy);\n};\n\nconst onRemove = (props: SourcePointIndexItemProps) => () => {\n  props.removePoint(props.point);\n};\n\nexport const SourcePointIndexItem: React.FC<SourcePointIndexItemProps> = (\n  props: SourcePointIndexItemProps\n) => {\n  const [x, set_x] = useState(props.point.x.toString());\n  const [y, set_y] = useState(props.point.y.toString());\n  const [w, set_w] = useState(props.point.w.toString());\n  const [h, set_h] = useState(props.point.h.toString());\n\n  return (\n    <div className=\"point-index-item\">\n      <p>shape:</p>\n      <select onChange={onTypeChange(props)} value={props.point.type}>\n        <option value=\"Circle\">Circle</option>\n        <option value=\"Box\">Box</option>\n      </select>\n      <p>color:</p>\n      <input\n        type=\"color\"\n        onChange={onColorChange(props)}\n        value={props.point.color}\n      />\n      <p>remove:</p>\n      <button onClick={onRemove(props)}>Click to remove</button>\n      <p>x:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_x, \"x\")}\n        value={x}\n      />\n      <p>y:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_y, \"y\")}\n        value={y}\n      />\n      <p>w:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_w, \"w\")}\n        value={w}\n      />\n      <p>h:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_h, \"h\")}\n        value={h}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../Store/store\";\nimport {\n  SourcePointsState,\n  SourcePointActionTypes\n} from \"../../Store/SourcePoints/Types\";\nimport {\n  addPoint,\n  editPoint,\n  removePoint\n} from \"../../Store/SourcePoints/Actions\";\nimport { SourcePoint } from \"../../FractalCanvas/Types\";\nimport { SourcePointIndexItem } from \"./SourcePointIndexItem\";\nimport \"./IndexItem.css\";\nimport \"./Index.css\";\n\ninterface SourcePointIndexProps {\n  sourcePoints: SourcePointsState;\n  addSourcePoint: () => void;\n  editSourcePoint: (point: SourcePoint) => SourcePointActionTypes;\n  removeSourcePoint: (point: SourcePoint) => SourcePointActionTypes;\n}\n\nconst SourcePointIndex: React.FC<SourcePointIndexProps> = (\n  props: SourcePointIndexProps\n) => {\n  return (\n    <div>\n      <div className=\"index-nav\">\n        <p>source points</p>\n        <button onClick={props.addSourcePoint}>Add</button>\n        <button onClick={() => alert(\"not working yet\")}>Randomize</button>\n      </div>\n      {props.sourcePoints.points.map(point => (\n        <SourcePointIndexItem\n          key={point.id}\n          point={point}\n          editPoint={props.editSourcePoint}\n          removePoint={props.removeSourcePoint}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst MSTP = (state: AppState) => ({\n  sourcePoints: state.sourcePoints\n});\n\nconst MDTP = (dispatch: Dispatch) => {\n  const defaultSourcePoint: SourcePoint = {\n    type: \"Box\",\n    color: \"#ffffff\",\n    x: 350,\n    y: 350,\n    w: 30,\n    h: 30,\n    id: -1\n  };\n  return {\n    addSourcePoint: () => dispatch(addPoint(defaultSourcePoint)),\n    editSourcePoint: (point: SourcePoint) => dispatch(editPoint(point)),\n    removeSourcePoint: (point: SourcePoint) => dispatch(removePoint(point))\n  };\n};\n\nconst connected = connect(\n  MSTP,\n  MDTP\n)(SourcePointIndex);\n\nexport default connected;\n","import {\n  ADD_SOURCE_POINT,\n  EDIT_SOURCE_POINT,\n  REMOVE_SOURCE_POINT,\n  SourcePointActionTypes\n} from \"./Types\";\nimport { SourcePoint } from \"../../FractalCanvas/Types\";\n\nexport function addPoint(point: SourcePoint): SourcePointActionTypes {\n  return {\n    type: ADD_SOURCE_POINT,\n    point\n  };\n}\n\nexport function editPoint(point: SourcePoint): SourcePointActionTypes {\n  return {\n    type: EDIT_SOURCE_POINT,\n    point\n  };\n}\n\nexport function removePoint(point: SourcePoint): SourcePointActionTypes {\n  return {\n    type: REMOVE_SOURCE_POINT,\n    point\n  };\n}\n","import { FractalPoint } from \"../../FractalCanvas/Types\";\n\nexport const ADD_FRACTAL_POINT = \"UC_ADD_FRACTAL_POINT\";\nexport const EDIT_FRACTAL_POINT = \"UC_EDIT_FRACTAL_POINT\";\nexport const SET_GCO = \"SET_GCO\";\nexport const REMOVE_FRACTAL_POINT = \"REMOVE_FRACTAL_POINT\";\nexport const SET_ITER_DELAY = \"SET_ITER_DELAY\";\nexport const SET_FORCE_FULL_PLAY = \"SET_FORCE_FULL_PLAY\";\n\nexport interface AddFractalPointAction {\n  type: typeof ADD_FRACTAL_POINT;\n  point: FractalPoint;\n}\n\nexport interface EditFractalPointAction {\n  type: typeof EDIT_FRACTAL_POINT;\n  point: FractalPoint;\n}\n\nexport type GCO_Value = \"source-over\" | \"destination-over\";\n\nexport interface SetGCOFractalPointAction {\n  type: typeof SET_GCO;\n  newGCO: GCO_Value;\n}\n\nexport interface SetIterDelayAction {\n  type: typeof SET_ITER_DELAY;\n  newDelay: number;\n}\n\nexport interface SetForceFullPlayAction {\n  type: typeof SET_FORCE_FULL_PLAY;\n  forceFullPlay: boolean;\n}\n\nexport interface RemoveFractalPointAction {\n  type: typeof REMOVE_FRACTAL_POINT;\n  point: FractalPoint;\n}\n\nexport interface FractalPointsState {\n  points: Array<FractalPoint>;\n  maxId: number;\n  updateId: number;\n  globalCompositeOperation: GCO_Value;\n  forceFullPlay: boolean;\n  iterationDelay: number;\n}\n\nexport type FractalPointActionTypes =\n  | AddFractalPointAction\n  | EditFractalPointAction\n  | RemoveFractalPointAction\n  | SetGCOFractalPointAction\n  | SetIterDelayAction\n  | SetForceFullPlayAction;\n","import React, { ChangeEvent, useState } from \"react\";\nimport { FractalPoint } from \"../../FractalCanvas/Types\";\nimport { FractalPointActionTypes } from \"../../Store/FractalPoints/Types\";\n\ninterface FractalPointIndexItemProps {\n  point: FractalPoint;\n  editPoint: (point: FractalPoint) => FractalPointActionTypes;\n  removePoint: (point: FractalPoint) => FractalPointActionTypes;\n}\n\nconst onChangeInt = (\n  props: FractalPointIndexItemProps,\n  hookSetFn: React.Dispatch<React.SetStateAction<string>>,\n  changeVal: \"x\" | \"y\" | \"w\" | \"h\" | \"iters\"\n) => (e: ChangeEvent<HTMLInputElement>) => {\n  const val = e.currentTarget.value;\n  const copy = JSON.parse(JSON.stringify(props.point)) as FractalPoint;\n  if (val === \"\") {\n    hookSetFn(val);\n  } else if (!isNaN(parseInt(val))) {\n    hookSetFn(val);\n    copy[changeVal] = parseInt(val);\n    props.editPoint(copy);\n  }\n};\n\nconst onRemove = (props: FractalPointIndexItemProps) => () => {\n  props.removePoint(props.point);\n};\n\nexport const FractalPointIndexItem: React.FC<FractalPointIndexItemProps> = (\n  props: FractalPointIndexItemProps\n) => {\n  const [x, set_x] = useState(props.point.x.toString());\n  const [y, set_y] = useState(props.point.y.toString());\n  const [w, set_w] = useState(props.point.w.toString());\n  const [h, set_h] = useState(props.point.h.toString());\n  const [iters, set_iters] = useState(props.point.iters.toString());\n  return (\n    <div className=\"point-index-item\">\n      <p>x:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_x, \"x\")}\n        value={x}\n      />\n      <p>y:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_y, \"y\")}\n        value={y}\n      />\n      <p>w:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_w, \"w\")}\n        value={w}\n      />\n      <p>h:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_h, \"h\")}\n        value={h}\n      />\n      <p>iters:</p>\n      <input\n        type=\"number\"\n        onChange={onChangeInt(props, set_iters, \"iters\")}\n        value={iters}\n      />\n      <p>remove:</p>\n      <button onClick={onRemove(props)}>Click to remove</button>\n    </div>\n  );\n};\n","import React, { ChangeEvent } from \"react\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../Store/store\";\nimport {\n  FractalPointsState,\n  FractalPointActionTypes,\n  GCO_Value\n} from \"../../Store/FractalPoints/Types\";\nimport {\n  addPoint,\n  editPoint,\n  removePoint,\n  setGCO,\n  setForceFullPlay,\n  setIterDelay\n} from \"../../Store/FractalPoints/actions\";\nimport { FractalPoint } from \"../../FractalCanvas/Types\";\nimport \"./IndexItem.css\";\nimport \"./Index.css\";\nimport { FractalPointIndexItem } from \"./FractalPointIndexItem\";\n\ninterface FractalPointIndexProps {\n  fractalPoints: FractalPointsState;\n  addFractalPoint: () => void;\n  editFractalPoint: (point: FractalPoint) => FractalPointActionTypes;\n  removeFractalPoint: (point: FractalPoint) => FractalPointActionTypes;\n  setGCO: (newGCO: GCO_Value) => FractalPointActionTypes;\n  setIterDelay: (newDelay: number) => FractalPointActionTypes;\n}\n\nconst onTypeChange = (props: FractalPointIndexProps) => (\n  e: ChangeEvent<HTMLSelectElement>\n) => {\n  const val: GCO_Value = e.currentTarget.value as\n    | \"source-over\"\n    | \"destination-over\";\n  props.setGCO(val);\n};\n\nconst FractalPointIndex: React.FC<FractalPointIndexProps> = (\n  props: FractalPointIndexProps\n) => {\n  return (\n    <div>\n      <div className=\"index-nav\">\n        <p>FractalPoints</p>\n        <button onClick={props.addFractalPoint}>Add</button>\n        <button onClick={() => alert(\"not working yet\")}>Randomize</button>\n        <select\n          onChange={onTypeChange(props)}\n          value={props.fractalPoints.globalCompositeOperation}\n        >\n          <option value=\"source-over\">new over</option>\n          <option value=\"destination-over\">new under</option>\n        </select>\n      </div>\n      {props.fractalPoints.points.map(point => (\n        <FractalPointIndexItem\n          key={point.id}\n          point={point}\n          editPoint={props.editFractalPoint}\n          removePoint={props.removeFractalPoint}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst MSTP = (state: AppState) => ({\n  fractalPoints: state.fractalPoints\n});\n\nconst MDTP = (dispatch: Dispatch) => {\n  const defaultFractalPoint: FractalPoint = {\n    x: 175,\n    y: 175,\n    w: 350,\n    h: 350,\n    id: -1,\n    iters: 5\n  };\n  return {\n    addFractalPoint: () => dispatch(addPoint(defaultFractalPoint)),\n    editFractalPoint: (point: FractalPoint) => dispatch(editPoint(point)),\n    removeFractalPoint: (point: FractalPoint) => dispatch(removePoint(point)),\n    setGCO: (newGCO: GCO_Value) => dispatch(setGCO(newGCO)),\n    setForceFullPlay: (forceFullPlay: boolean) =>\n      dispatch(setForceFullPlay(forceFullPlay)),\n    setIterDelay: (newDelay: number) => dispatch(setIterDelay(newDelay))\n  };\n};\n\nconst connected = connect(\n  MSTP,\n  MDTP\n)(FractalPointIndex);\n\nexport default connected;\n","import {\n  ADD_FRACTAL_POINT,\n  EDIT_FRACTAL_POINT,\n  REMOVE_FRACTAL_POINT,\n  SET_GCO,\n  GCO_Value,\n  SET_ITER_DELAY,\n  SET_FORCE_FULL_PLAY,\n  FractalPointActionTypes\n} from \"./Types\";\nimport { FractalPoint } from \"../../FractalCanvas/Types\";\n\nexport function addPoint(point: FractalPoint): FractalPointActionTypes {\n  return {\n    type: ADD_FRACTAL_POINT,\n    point\n  };\n}\n\nexport function editPoint(point: FractalPoint): FractalPointActionTypes {\n  return {\n    type: EDIT_FRACTAL_POINT,\n    point\n  };\n}\n\nexport function removePoint(point: FractalPoint): FractalPointActionTypes {\n  return {\n    type: REMOVE_FRACTAL_POINT,\n    point\n  };\n}\n\nexport function setGCO(newGCO: GCO_Value): FractalPointActionTypes {\n  return {\n    type: SET_GCO,\n    newGCO\n  };\n}\n\nexport function setIterDelay(newDelay: number): FractalPointActionTypes {\n  return {\n    type: SET_ITER_DELAY,\n    newDelay\n  };\n}\n\nexport function setForceFullPlay(\n  forceFullPlay: boolean\n): FractalPointActionTypes {\n  return {\n    type: SET_FORCE_FULL_PLAY,\n    forceFullPlay\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SourcePointIndex from \"../Form/SourcePointIndex\";\nimport FractalPointIndex from \"../Form/FractalPointIndex\";\n\nconst App: React.FC = props => {\n  return (\n    <div className=\"App\">\n      <div>\n        <div className=\"app-nav-header\">\n          <h1>Fractal Canvas</h1>\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n            culpa qui officia deserunt mollit anim id est laborum.\n          </p>\n        </div>\n        <FractalPointIndex />\n        <SourcePointIndex />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function loadImgPromise(\n  img: HTMLImageElement,\n  src: string\n): Promise<HTMLImageElement> {\n  return new Promise((resolve) => {\n    img.src = src;\n    img.addEventListener(\"load\", () => {\n      resolve(img);\n    });\n  });\n}\n","import { FractalPoint, SourcePoint } from \"./Types\";\nimport { loadImgPromise } from \"../Helpers\";\nimport { AppState } from \"../Store/store\";\nimport { GCO_Value } from \"../Store/FractalPoints/Types\";\n\nclass FractalCanvas {\n  private fractalPoints: FractalPoint[] = [];\n  private myImg = new Image();\n  private updateId = -1;\n  private pendingUpdate: AppState | null = null;\n  private globalCompositeOperation: GCO_Value = \"source-over\";\n  constructor(\n    private fCanvas: HTMLCanvasElement,\n    private sCanvas: HTMLCanvasElement\n  ) {}\n\n  receiveUpdates(store: AppState) {\n    const ctx = this.sCanvas.getContext(\"2d\");\n    if (!ctx) return;\n    this.globalCompositeOperation =\n      store.fractalPoints.globalCompositeOperation;\n    ctx.clearRect(0, 0, this.sCanvas.width, this.sCanvas.height);\n    store.sourcePoints.points.forEach(point => {\n      this.drawSourcePoint(ctx, point);\n    });\n    if (this.updateId !== store.fractalPoints.updateId) {\n      this.fractalPoints = store.fractalPoints.points;\n      this.printFractal(store.fractalPoints.updateId);\n    }\n  }\n\n  private drawSourcePoint(ctx: CanvasRenderingContext2D, point: SourcePoint) {\n    ctx.save();\n    ctx.translate(point.x, point.y);\n    ctx.fillStyle = point.color;\n    if (point.type === \"Circle\") {\n      ctx.beginPath();\n      ctx.ellipse(0, 0, point.w / 2, point.h / 2, 0, 0, Math.PI * 2);\n      ctx.closePath();\n      ctx.fill();\n    } else {\n      ctx.fillRect(-point.w / 2, -point.h / 2, point.w, point.h);\n    }\n    ctx.restore();\n  }\n\n  private async printFractal(thisUpdateId: number) {\n    this.updateId = thisUpdateId;\n    if (\n      this.sCanvas.width !== this.fCanvas.width ||\n      this.sCanvas.height !== this.fCanvas.height\n    )\n      return false;\n    const ctx = this.fCanvas.getContext(\"2d\");\n    if (ctx === null) return false;\n    ctx.clearRect(0, 0, this.fCanvas.width, this.fCanvas.height);\n    let fractalPointsCopy = JSON.parse(\n      JSON.stringify(this.fractalPoints)\n    ) as FractalPoint[];\n    await new Promise(res => setTimeout(res, 500));\n    this.myImg = await loadImgPromise(this.myImg, this.sCanvas.toDataURL());\n    if (this.updateId !== thisUpdateId) return false;\n    ctx.globalCompositeOperation = this.globalCompositeOperation;\n    ctx.drawImage(this.myImg, 0, 0, this.fCanvas.width, this.fCanvas.height);\n    while (fractalPointsCopy.length) {\n      this.myImg = await loadImgPromise(this.myImg, this.fCanvas.toDataURL());\n      if (this.updateId !== thisUpdateId) return false;\n      fractalPointsCopy = fractalPointsCopy.filter(\n        (fp: FractalPoint) => fp.iters > 0\n      );\n      for (let i = 0; i < fractalPointsCopy.length; i++) {\n        const fractalPoint = fractalPointsCopy[i];\n        const x = fractalPoint.x - fractalPoint.w / 2;\n        const y = fractalPoint.y - fractalPoint.h / 2;\n        ctx.drawImage(this.myImg, x, y, fractalPoint.w, fractalPoint.h);\n        fractalPoint.iters--;\n      }\n    }\n    return true;\n  }\n}\nexport default FractalCanvas;\n","import {\n  ADD_FRACTAL_POINT,\n  EDIT_FRACTAL_POINT,\n  REMOVE_FRACTAL_POINT,\n  SET_GCO,\n  SET_ITER_DELAY,\n  SET_FORCE_FULL_PLAY,\n  FractalPointsState\n} from \"./Types\";\nimport {\n  ADD_SOURCE_POINT,\n  EDIT_SOURCE_POINT,\n  REMOVE_SOURCE_POINT\n} from \"../SourcePoints/Types\";\nimport { PointActionType } from \"../Types\";\nimport { FractalPoint } from \"../../FractalCanvas/Types\";\n\nconst initialState: FractalPointsState = {\n  points: [],\n  maxId: 0,\n  updateId: 0,\n  globalCompositeOperation: \"source-over\",\n  forceFullPlay: true,\n  iterationDelay: 0\n};\n\nexport function FractalPointsReducer(\n  state: FractalPointsState = initialState,\n  action: PointActionType\n): FractalPointsState {\n  switch (action.type) {\n    case ADD_FRACTAL_POINT:\n      const newPoint0 = JSON.parse(\n        JSON.stringify(action.point)\n      ) as FractalPoint;\n      const FPsCopy0 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy0.updateId++;\n      newPoint0.id = ++FPsCopy0.maxId;\n      FPsCopy0.points.push(newPoint0);\n      return FPsCopy0;\n    case EDIT_FRACTAL_POINT:\n      const newPoint1 = JSON.parse(\n        JSON.stringify(action.point)\n      ) as FractalPoint;\n      const FPsCopy1 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy1.updateId++;\n      for (let i = 0; i < FPsCopy1.points.length; i++) {\n        if (FPsCopy1.points[i].id === newPoint1.id) {\n          FPsCopy1.points[i] = newPoint1;\n          break;\n        }\n      }\n      return FPsCopy1;\n    case REMOVE_FRACTAL_POINT:\n      const removePoint5 = JSON.parse(\n        JSON.stringify(action.point)\n      ) as FractalPoint;\n      const FPsCopy5 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      for (let i = 0; i < FPsCopy5.points.length; i++) {\n        if (FPsCopy5.points[i].id === removePoint5.id) {\n          FPsCopy5.points.splice(i, 1);\n          break;\n        }\n      }\n      FPsCopy5.updateId++;\n      return FPsCopy5;\n    case ADD_SOURCE_POINT:\n      const FPsCopy2 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy2.updateId++;\n      return FPsCopy2;\n    case EDIT_SOURCE_POINT:\n      const FPsCopy3 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy3.updateId++;\n      return FPsCopy3;\n    case REMOVE_SOURCE_POINT:\n      const FPsCopy4 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy4.updateId++;\n      return FPsCopy4;\n    case SET_GCO:\n      const FPsCopy6 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy6.globalCompositeOperation = action.newGCO;\n      FPsCopy6.updateId++;\n      return FPsCopy6;\n    case SET_ITER_DELAY:\n      const FPsCopy7 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy7.iterationDelay = action.newDelay;\n      return FPsCopy7;\n    case SET_FORCE_FULL_PLAY:\n      const FPsCopy8 = JSON.parse(JSON.stringify(state)) as FractalPointsState;\n      FPsCopy8.forceFullPlay = action.forceFullPlay;\n      return FPsCopy8;\n    default:\n      return state;\n  }\n}\n","import {\n  SourcePointActionTypes,\n  ADD_SOURCE_POINT,\n  EDIT_SOURCE_POINT,\n  REMOVE_SOURCE_POINT,\n  SourcePointsState\n} from \"./Types\";\nimport { SourcePoint } from \"../../FractalCanvas/Types\";\n\nconst initialState: SourcePointsState = {\n  points: [],\n  maxId: 0\n};\n\nexport function SourcePointsReducer(\n  state: SourcePointsState = initialState,\n  action: SourcePointActionTypes\n): SourcePointsState {\n  switch (action.type) {\n    case ADD_SOURCE_POINT:\n      const newPoint0 = JSON.parse(JSON.stringify(action.point)) as SourcePoint;\n      const SPsCopy0 = JSON.parse(JSON.stringify(state)) as SourcePointsState;\n      newPoint0.id = ++SPsCopy0.maxId;\n      SPsCopy0.points.push(newPoint0);\n      return SPsCopy0;\n    case EDIT_SOURCE_POINT:\n      const newPoint1 = JSON.parse(JSON.stringify(action.point)) as SourcePoint;\n      const SPsCopy1 = JSON.parse(JSON.stringify(state)) as SourcePointsState;\n      for (let i = 0; i < SPsCopy1.points.length; i++) {\n        if (SPsCopy1.points[i].id === newPoint1.id) {\n          SPsCopy1.points[i] = newPoint1;\n          break;\n        }\n      }\n      return SPsCopy1;\n    case REMOVE_SOURCE_POINT:\n      const removePoint2 = JSON.parse(\n        JSON.stringify(action.point)\n      ) as SourcePoint;\n      const SPsCopy2 = JSON.parse(JSON.stringify(state)) as SourcePointsState;\n      for (let i = 0; i < SPsCopy2.points.length; i++) {\n        if (SPsCopy2.points[i].id === removePoint2.id) {\n          SPsCopy2.points.splice(i, 1);\n          break;\n        }\n      }\n      return SPsCopy2;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { FractalPointsReducer } from \"./FractalPoints/Reducer\";\nimport { SourcePointsReducer } from \"./SourcePoints/Reducer\";\n\nexport const rootReducer = combineReducers({\n  fractalPoints: FractalPointsReducer,\n  sourcePoints: SourcePointsReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n","import { AppState } from \"./rootReducer\";\n\nconst normal = (): AppState => ({\n  fractalPoints: {\n    maxId: 3,\n    updateId: 0,\n    globalCompositeOperation: \"destination-over\",\n    points: [\n      // { x: 350, y: 150, w: 300, h: 300, iters: 6, id: 0 },\n      // { x: 550, y: 350, w: 300, h: 300, iters: 2, id: 1 },\n      // { x: 350, y: 550, w: 300, h: 300, iters: 6, id: 2 },\n\n      // { x: 350, y: 175, w: 350, h: 350, iters: 6, id: 0 },\n      // { x: 525, y: 350, w: 350, h: 350, iters: 2, id: 1 },\n      // { x: 350, y: 525, w: 350, h: 350, iters: 6, id: 2 },\n\n      { x: 250, y: 350, w: 300, h: 300, iters: 4, id: 0 },\n      { x: 350, y: 200, w: 300, h: 300, iters: 4, id: 1 },\n      { x: 450, y: 350, w: 300, h: 300, iters: 4, id: 2 },\n      { x: 350, y: 500, w: 300, h: 300, iters: 4, id: 3 }\n    ],\n    forceFullPlay: true,\n    iterationDelay: 0\n  },\n  sourcePoints: {\n    maxId: 6,\n    points: [\n      { type: \"Box\", x: 100, y: 350, w: 100, h: 100, color: \"#00ffff\", id: 1 },\n      { type: \"Box\", x: 200, y: 250, w: 100, h: 100, color: \"#ff0000\", id: 3 },\n      {\n        type: \"Circle\",\n        x: 200,\n        y: 350,\n        w: 100,\n        h: 100,\n        color: \"#0000ff\",\n        id: 4\n      },\n      { type: \"Box\", x: 200, y: 450, w: 100, h: 100, color: \"#00ff00\", id: 5 },\n      // { type: \"Circle\", x: 350, y: 350, w: 75, h: 75, color: \"#ffffff\", id: 6 },\n      { type: \"Box\", x: 275, y: 350, w: 50, h: 100, color: \"#ffffff\", id: 6 }\n    ]\n  }\n});\n\nconst other = (): AppState => ({\n  fractalPoints: {\n    forceFullPlay: true,\n    globalCompositeOperation: \"source-over\",\n    iterationDelay: 0,\n    maxId: 3,\n    updateId: 0,\n    points: [\n      { h: 300, id: 0, iters: 4, w: 300, x: 250, y: 350 },\n      { h: 300, id: 1, iters: 1, w: 300, x: 350, y: 200 },\n      { h: 300, id: 2, iters: 4, w: 300, x: 450, y: 350 },\n      { h: 300, id: 3, iters: 4, w: 300, x: 350, y: 500 }\n    ],\n  },\n  sourcePoints: {\n    maxId: 7,\n    points: [\n      { color: \"#285288\", h: 210, id: 4, type: \"Circle\", w: 210, x: 350, y: 150 },\n      { color: \"#f4d297\", h: 150, id: 6, type: \"Circle\", w: 150, x: 350, y: 125 },\n      { color: \"#fffffe\", h: 60, id: 7, type: \"Circle\", w: 60, x: 350, y: 350 }\n    ]\n  }\n})\n\nexport default other;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport FractalCanvas from \"./FractalCanvas/FractalCanvas\";\nimport createStore from \"./Store/store\";\nimport { Provider } from \"react-redux\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const HTMLFractalCanvas = document.getElementById(\n    \"fractal-canvas\"\n  ) as HTMLCanvasElement;\n  const HTMLSourceCanvas = document.getElementById(\n    \"input-canvas\"\n  ) as HTMLCanvasElement;\n  const store = createStore();\n  const fractalCanvas = new FractalCanvas(HTMLFractalCanvas, HTMLSourceCanvas);\n\n  //@ts-ignore\n  window.store = store;\n\n  fractalCanvas.receiveUpdates(store.getState());\n  store.subscribe(() => {\n    fractalCanvas.receiveUpdates(store.getState());\n  });\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById(\"react-root\")\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport { rootReducer } from \"./rootReducer\";\nimport makePreloadedState from \"./PreloadedState\";\nimport { AppState } from \"./rootReducer\";\n\nexport default () => {\n  const store = createStore(\n    rootReducer,\n    makePreloadedState(),\n    applyMiddleware(logger)\n  );\n  return store;\n};\n\nexport type AppState = AppState;\n"],"sourceRoot":""}